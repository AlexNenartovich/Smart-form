{"version":3,"sources":["AddEmployee.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","textField","marginLeft","marginRight","AddEmployee","classes","React","useState","firstLoad","setLoad","Date","selectedDate","setSelectedDate","name","setName","department","setDepartment","gender","setGender","message","setMessage","toInput","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","console","log","id","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","Grid","container","item","xs","TextField","required","fullWidth","value","label","autoComplete","onChange","event","target","sm","type","defaultValue","InputLabelProps","shrink","date","Button","color","preventDefault","onClick","variables","sampleFunc","justify","to","style","table","minWidth","justifyContent","height","link","textDecoration","alignSelf","SimpleTable","data","upDateData","isLoading","length","CircularProgress","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","dob","App","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ef13069b.chunk.js","sourcesContent":["import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Link } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(7),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: \"100%\"\n    }\n}));\n\nclass insert {\n    constructor(name, department, gender, dob) {\n        this.name = name;\n        this.department = department;\n        this.gender = gender;\n        new Date(dob)\n    }\n}\n\nexport default function AddEmployee() {\n    const classes = useStyles();\n    const [firstLoad, setLoad] = React.useState(true);\n\n    const [selectedDate, setSelectedDate] = React.useState(\n        new Date(\"1998-04-02\")\n    );\n    const [name, setName] = React.useState(\"\");\n    const [department, setDepartment] = React.useState(\"\");\n    const [gender, setGender] = React.useState(\"\");\n\n    const handleDateChange = date => setSelectedDate(date);\n    const handleNameChange = event => setName(event.target.value);\n    const handlDepartmentChange = event => setDepartment(event.target.value);\n    const handleGenderChange = event => setGender(event.target.value);\n\n    const [message, setMessage] = React.useState(\"Nothing saved in the session\");\n\n    async function sampleFunc(toInput) {\n        const response = await fetch(\"/api/employee\", {\n            method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\", // include, *same-origin, omit\n            headers: {\n                \"Content-Type\": \"application/json\"\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: \"follow\", // manual, *follow, error\n            referrerPolicy: \"no-referrer\", // no-referrer, *client\n            body: JSON.stringify(toInput) // body data type must match \"Content-Type\" header\n        });\n        let body = await response.json();\n        console.log(body.id);\n        setMessage(body.id ? \"Data sucessfully updated\" : \"Data updation failed\");\n    }\n\n    const handleSubmit = variables => {\n        const toInput = { name, department, gender, selectedDate };\n\n        sampleFunc(toInput);\n        setName(\"\");\n        setDepartment(\"\");\n        setGender(\"\");\n    };\n\n    if (firstLoad) {\n        // sampleFunc();\n        setLoad(false);\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <GroupIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Employee Directory\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"name\"\n                                value={name}\n                                label=\"Name\"\n                                name=\"name\"\n                                autoComplete=\"name\"\n                                onChange={handleNameChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                autoComplete=\"department\"\n                                name=\"department\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                value={department}\n                                id=\"department\"\n                                label=\"Department\"\n                                onChange={handlDepartmentChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"gender\"\n                                value={gender}\n                                label=\"Gender\"\n                                name=\"gender\"\n                                autoComplete=\"gender\"\n                                onChange={handleGenderChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"date\"\n                                label=\"Date of birth\"\n                                type=\"date\"\n                                defaultValue=\"1998-04-02\"\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                                onChange={handleDateChange}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        // type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        preventDefault\n                        className={classes.submit}\n                        onClick={handleSubmit}\n                    >\n                        Save\n                    </Button>\n\n                    <Grid container justify=\"center\">\n                        <Grid item>\n                            <Link to=\"/view\">View Employee Records</Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Typography style={{ margin: 7 }} variant=\"body1\">\n                    Status: {message}\n                </Typography>\n            </div>\n        </Container>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport { Link } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles(theme => ({\n    table: {\n        minWidth: 600\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    paper: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: `10px`,\n        height: \"100%\",\n        width: \"99%\",\n        marginTop: theme.spacing(7)\n    },\n    link: {\n        color: \"rgba(0,0,0,0.65)\",\n        textDecoration: \"none\",\n        marginLeft: \"10%\",\n        alignSelf: \"flex-start\",\n        \"&:hover\": {\n            color: \"rgba(0,0,0,1)\"\n        }\n    }\n}));\n\nexport default function SimpleTable() {\n    const classes = useStyles();\n\n    const [data, upDateData] = React.useState([]);\n    const [firstLoad, setLoad] = React.useState(true);\n    let isLoading = true;\n\n    async function sampleFunc() {\n        let response = await fetch(\"/api/employee\");\n        let body = await response.json();\n        upDateData(body);\n    }\n\n    if (firstLoad) {\n        sampleFunc();\n        setLoad(false);\n    }\n\n    if (data.length > 0) isLoading = false;\n\n    return (\n        <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <GroupIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Employee Directory\n            </Typography>\n\n            {isLoading ? (\n                <CircularProgress />\n            ) : (\n                <TableContainer\n                    style={{ width: \"80%\", margin: \"0 10px\" }}\n                    component={Paper}\n                >\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">Name</TableCell>\n                                <TableCell align=\"center\">Department</TableCell>\n                                <TableCell align=\"center\">Gender</TableCell>\n                                <TableCell align=\"center\">Dob</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {data?.map(row => (\n                                <TableRow key={row.name}>\n                                    <TableCell align=\"center\">{row.name}</TableCell>\n                                    <TableCell align=\"center\">{row.department}</TableCell>\n                                    <TableCell align=\"center\">{row.gender}</TableCell>\n                                    <TableCell align=\"center\">{row.dob}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            )}\n            <Link className={classes.link} to=\"/\">\n                {\" \"}\n                <Typography align=\"left\">\n                    &#x2190; Head back to save data\n                </Typography>{\" \"}\n            </Link>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport AddEmployee from \"./AddEmployee\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Table from \"./Table\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n              <Switch>\n                <Route exact path=\"/\" component={AddEmployee} />\n                <Route exact path=\"/view\" component={Table} />\n              </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}